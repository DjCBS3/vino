AC_INIT(server/vino-fb.c)

AM_INIT_AUTOMAKE(vino, 2.7.5)
AM_CONFIG_HEADER(config.h)

AM_MAINTAINER_MODE

GETTEXT_PACKAGE=vino
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE")

AC_PROG_CC
AC_ISC_POSIX
AC_HEADER_STDC
AC_C_BIGENDIAN

AC_ARG_PROGRAM
AM_PROG_LIBTOOL
AC_PROG_INTLTOOL
AC_PATH_PROG(GCONFTOOL, gconftool-2)
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

AC_PATH_PROG(JAVAC, javac)
AC_PATH_PROG(JAR, jar)

AC_ARG_ENABLE(java,
              [AC_HELP_STRING([--enable-java],
                              [rebuild the Java applet [default=no]])],,
              [enable_java=no])
AM_CONDITIONAL(JAVA_SDK_AVAILABLE, test "x$JAVAC" != "x" -a "x$JAR" != "x" -a "$enable_java" != "no")

ALL_LINGUAS="bg bn cs en_CA en_GB es hu nl no pt pt_BR sq sr sr@Latn sv"
AM_GLIB_GNU_GETTEXT

GNOME_COMPILE_WARNINGS(yes)

AC_ARG_ENABLE(deprecations,
              [AC_HELP_STRING([--disable-deprecations],
                              [don't warn about deprecated usages [default=no]])],,
              [enable_deprecations=yes])

if test "x$enable_deprecations" = "xyes"; then
   DISABLE_DEPRECATED_CFLAGS="\
-DG_DISABLE_DEPRECATED \
-DGDK_DISABLE_DEPRECATED \
-DGTK_DISABLE_DEPRECATED \
-DGDK_PIXBUF_DISABLE_DEPRECATED \
-DGNOME_DISABLE_DEPRECATED"
   AC_SUBST(DISABLE_DEPRECATED_CFLAGS)
fi

PKG_CHECK_MODULES(VINO_SERVER, gtk+-x11-2.0 gconf-2.0 libglade-2.0 libgnomeui-2.0)
AC_SUBST(VINO_SERVER_LIBS)
AC_SUBST(VINO_SERVER_CFLAGS)
	
PKG_CHECK_MODULES(VINO_CAPPLET, gtk+-2.0 gconf-2.0 libglade-2.0 libgnomeui-2.0 >= 2.5.2)
AC_SUBST(VINO_CAPPLET_LIBS)
AC_SUBST(VINO_CAPPLET_CFLAGS)

dnl --enable-session-support=(yes|no)
AC_ARG_ENABLE(session_support,
	      [  --disable-session-support=[no/yes] don't build session management utility program [default=no]],,
	      enable_session_support=yes)
if test "$enable_session_support" = "yes"; then
  PKG_CHECK_MODULES(VINO_SESSION, gconf-2.0 libgnomeui-2.0)
  AC_SUBST(VINO_SESSION_LIBS)
  AC_SUBST(VINO_SESSION_CFLAGS)
fi
AM_CONDITIONAL(SESSION_SUPPORT, [test "$enable_session_support" = "yes"])

#
# If Pango included the shared library dependencies from X11 in
# the pkg-config output, then we use that (to avoid duplicates).
# but if they were omitted to avoid binary compatibility problems
# then we need to repeat the checks.
#
if $PKG_CONFIG --exists pangoxft ; then
  PANGO_PACKAGES="pangox pangoxft"
else
  PANGO_PACKAGES="pangox"
fi

x_libs="`$PKG_CONFIG --libs $PANGO_PACKAGES`"
case x_libs in
  *-lX11*) pango_omitted_x_deps=no ;;
  *)       pango_omitted_x_deps=yes ;;
esac

if test $pango_omitted_x_deps = yes ; then
  AC_PATH_XTRA
  
  if test x$no_x = xyes ; then
    AC_MSG_ERROR([X development libraries not found])
  else
    X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"
  fi
fi

AC_SUBST(X_LIBS)

#
# Bonobo foo
#

ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
AC_SUBST(ORBIT_IDL)

BONOBO_IDLDIR="`$PKG_CONFIG --variable=idldir bonobo-activation-2.0`"
AC_SUBST(BONOBO_IDLDIR)

#
# Check for gnutls
#
AC_ARG_ENABLE(gnutls,
	      [  --disable-gnutls=[no/yes] don't build VNC over SSL support [default=no]],,
	      enable_gnutls=yes)
if test "$enable_gnutls" = "yes"; then
  AM_PATH_LIBGNUTLS(1.0.0,
	            [AC_DEFINE(HAVE_GNUTLS)],
                    AC_MSG_WARN([[
***
*** libgnutls was not found. You may want to get it from
*** ftp://ftp.gnutls.org/pub/gnutls/
]]))
fi

#
# Check for gcrypt
#
AC_ARG_ENABLE(gcrypt,
	      [  --disable-gcrypt=[no/yes] don't use libgcrypt for random number generation [default=no]],,
	      enable_gcrypt=yes)
if test "$enable_gcrypt" = "yes"; then
  AM_PATH_LIBGCRYPT(1.1.90,
                    [AC_DEFINE(HAVE_GCRYPT)],
                    AC_MSG_WARN([[
***
*** libgcrypt was not found. You may want to get it from
*** ftp://ftp.gnupg.org/pub/gcrypt/alpha/libgcrypt/
]]))
fi

#
# Check for XDAMAGE extension
#
XSHM_LIBS=
AC_CHECK_HEADER(X11/extensions/Xdamage.h, [
    AC_CHECK_LIB(Xdamage, XDamageQueryExtension, [
      AC_DEFINE(HAVE_XDAMAGE)
      XDAMAGE_LIBS="-lXdamage"],, $X_LIBS)
  ],, [#include <X11/Xlib.h>])
AC_SUBST(XDAMAGE_LIBS)

#
# Check for MIT-SHM extension
#
XSHM_LIBS=
AC_CHECK_HEADER(X11/extensions/XShm.h, [
    AC_CHECK_LIB(Xext, XShmQueryExtension, [
      AC_DEFINE(HAVE_XSHM)
      XSHM_LIBS="-lXext"],, $X_LIBS)
  ],, [#include <X11/Xlib.h>])
AC_SUBST(XSHM_LIBS)

#
# Check for XTest extension
#
XTEST_LIBS=
AC_CHECK_HEADER(X11/extensions/XTest.h, [
    AC_CHECK_LIB(Xtst, XTestQueryExtension, [
      AC_DEFINE(HAVE_XTEST)
      XTEST_LIBS="-lXtst"],, $X_LIBS)
  ])
AC_SUBST(XTEST_LIBS)


dnl
dnl From libvncserver
dnl

AC_ARG_WITH(jpeg,
        [  --without-jpeg                       disable support for jpeg],
        , [ with_jpeg=yes ])
if test "x$with_jpeg" = "xyes"; then
        AC_CHECK_HEADER(jpeglib.h, HAVE_JPEGLIB_H="true")
fi

AC_ARG_WITH(zlib,
        [  --without-zlib                       disable support for deflate],
        , [ with_zlib=yes ])
AC_ARG_WITH(libz,
        [  --without-libz                       disable support for deflate],
        , [ with_libz=yes ])
if test "x$with_zlib" = "xyes" -a "x$with_libz" = "xyes"; then
        AC_CHECK_HEADER(zlib.h, HAVE_ZLIB_H="true")
fi

if test ! -z "$HAVE_ZLIB_H"; then
        AC_CHECK_LIB(z, deflate, , HAVE_ZLIB_H="")
        if test ! -z "$HAVE_JPEGLIB_H" -a ! -z "$HAVE_ZLIB_H"; then
                AC_CHECK_LIB(jpeg, jpeg_CreateCompress)
        fi
fi

AC_SUBST(LIBZ)
AC_SUBST(LIBJPEG)

AC_CHECK_HEADERS([netinet/in.h sys/time.h fcntl.h unistd.h sys/socket.h])
AC_CHECK_FUNCS([gettimeofday])

dnl
dnl End of libvncserver stuff
dnl


dnl --enable-debug=(yes|minimum|no)
AC_ARG_ENABLE(debug, [  --enable-debug=[no/yes] turn on debugging [default=no]],,enable_debug=minimum)
if test "$enable_debug" = "yes"; then
  VINO_DEBUG_CFLAGS="-DG_ENABLE_DEBUG"
else
  if test "x$enable_debug" = "xno"; then
    VINO_DEBUG_CFLAGS="-DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
  else
    VINO_DEBUG_CFLAGS=""
  fi
fi
AC_SUBST(VINO_DEBUG_CFLAGS)

AM_GCONF_SOURCE_2

dnl define a MAINT-like variable REBUILD which is set
dnl if Perl, so autogenerated sources can be rebuilt
AC_PATH_PROGS(PERL, perl5 perl)
AC_ARG_ENABLE(rebuilds, [  --disable-rebuilds      disable all source autogeneration rules],,enable_rebuilds=yes)
REBUILD=\#
if test "x$enable_rebuilds" = "xyes" && \
     test -n "$PERL" && \
     $PERL -e 'exit !($] >= 5.002)' > /dev/null 2>&1 ; then
  REBUILD=
fi
AC_SUBST(REBUILD)

AC_OUTPUT([
Makefile
server/Makefile
server/libvncserver/Makefile
server/libvncserver/rfb/Makefile
client/Makefile
client/java/Makefile
capplet/Makefile
session/Makefile
icons/Makefile
docs/Makefile
po/Makefile.in
])
